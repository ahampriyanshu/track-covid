{"version":3,"sources":["components/Chart/Chart.jsx"],"names":["lastUpdated","Date","toLocaleDateString","React","memo","graphData","value","index","country","dataset","title","isGraphDataArr","Array","isArray","data","map","confirmed","label","borderColor","fill","backgroundColor","recovered","deaths","lineChart","labels","date","datasets","options","display","text","responsive","maintainAspectRatio","scales","xAxes","gridLines","drawOnChartArea","drawBorder","zeroLineWidth","ticks","autoSkip","yAxes","elements","point","radius","hitRadius","hoverRadius","barChart","legend","className"],"mappings":"wIAAA,oCAIMA,GAJN,QAIoB,IAAIC,MAAOC,sBAmKhBC,cAAMC,MAjKP,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACvC,GAAIF,IAAUC,EAAO,OAAO,KAC5B,IAAIE,EAAU,GACZC,EAAQ,GACRC,EAAiBN,GAAaO,MAAMC,QAAQR,GAE/B,IAAVE,GAAyB,IAAVA,IAAgBI,EAsBf,IAAVJ,GAAeI,GACxBF,EAAU,CACR,CACEK,KAAMT,EAAUU,KAAI,qBAAEC,aACtBC,MAAO,YACPC,YAAa,yBACbC,MAAM,EACNC,gBAAiB,4BAEnB,CACEN,KAAMT,EAAUU,KAAI,qBAAEM,aACtBJ,MAAO,YACPC,YAAa,uBACbC,MAAM,EACNC,gBAAiB,wBAEnB,CACEN,KAAMT,EAAUU,KAAI,qBAAEO,UACtBL,MAAO,WACPC,YAAa,uBACbC,MAAM,EACNC,gBAAiB,yBAGrBV,EAAK,0BAAsBV,IACR,IAAVO,GAAgBI,IACzBF,EAAU,CACR,CACEQ,MAAO,QACPG,gBAAiB,CACf,2BACA,uBACA,wBAEFN,KAAM,CACJT,EAAUW,UAAUV,MACpBD,EAAUgB,UAAUf,MACpBD,EAAUiB,OAAOhB,SAIvBI,EAAK,0BAAsBV,KA9D3BS,EAAU,CACR,CACEK,KAAMH,EAAiBN,EAAUU,KAAI,qBAAEC,aAA4B,GACnEC,MAAO,YACPC,YAAa,yBACbC,MAAM,GAER,CACEL,KAAMH,EAAiBN,EAAUU,KAAI,qBAAEM,aAA4B,GACnEJ,MAAO,YACPC,YAAa,uBACbC,MAAM,GAER,CACEL,KAAMH,EAAiBN,EAAUU,KAAI,qBAAEO,UAAsB,GAC7DL,MAAO,WACPC,YAAa,uBACbC,MAAM,IAGVT,EAAK,0BAAsBV,IA6C7B,IAAMuB,EACJlB,GAAaA,EAAU,GACrB,kBAAC,OAAD,CACES,KAAM,CACJU,OAAQnB,EAAUU,KAAI,qBAAEU,QACxBC,SAAUjB,GAEZkB,QAAS,CACPjB,MAAO,CAACkB,SAAS,EAAMC,KAAMnB,GAC7BoB,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTC,iBAAiB,EACjBP,SAAS,EACTQ,YAAY,EACZC,cAAe,GAEjBC,MAAO,CACLV,SAAS,EACTW,UAAU,KAIhBC,MAAO,CACL,CACEN,UAAW,CACTC,iBAAiB,EACjBP,SAAS,EACTQ,YAAY,EACZC,cAAe,GAEjBC,MAAO,CACLV,SAAS,EACTW,UAAU,MAKlBE,SAAU,CACRC,MAAO,CACLC,OAAQ,EACRC,UAAW,GACXC,YAAa,OAKnB,KAEAC,EACJzC,GAAaA,EAAUW,UACrB,kBAAC,MAAD,CACEF,KAAM,CACJU,OAAQ,CAAC,YAAa,YAAa,YACnCE,SAAUjB,GAEZkB,QAAS,CACPoB,OAAQ,CAACnB,SAAS,GAClBlB,MAAO,CAACkB,SAAS,EAAMC,KAAMnB,GAC7BsB,OAAQ,CACNC,MAAO,CACL,CACEC,UAAW,CACTC,iBAAiB,EACjBC,YAAY,KAIlBI,MAAO,CACL,CACEN,UAAW,CACTC,iBAAiB,EACjBC,YAAY,SAOtB,KAEN,OACE,yBAAKY,UAAU,mBAAmBxC,EAAUsC,EAAWvB","file":"static/js/Chart.ef878139.chunk.js","sourcesContent":["import React from 'react';\nimport {Line, Bar} from 'react-chartjs-2';\nimport './Chart.css';\n\nconst lastUpdated = new Date().toLocaleDateString();\n\nconst Chart = ({graphData, value, index, country}) => {\n  if (value !== index) return null;\n  let dataset = [],\n    title = '',\n    isGraphDataArr = graphData && Array.isArray(graphData);\n\n  if ((index === 0 || index === 1) && isGraphDataArr) {\n    dataset = [\n      {\n        data: isGraphDataArr ? graphData.map(({confirmed}) => confirmed) : [],\n        label: 'Confirmed',\n        borderColor: 'rgba(187, 134, 252, 1)',\n        fill: false,\n      },\n      {\n        data: isGraphDataArr ? graphData.map(({recovered}) => recovered) : [],\n        label: 'Recovered',\n        borderColor: 'rgba(0, 255, 0, 0.7)',\n        fill: false,\n      },\n      {\n        data: isGraphDataArr ? graphData.map(({deaths}) => deaths) : [],\n        label: 'Deceased',\n        borderColor: 'rgba(255, 0, 0, 0.7)',\n        fill: false,\n      },\n    ];\n    title = `Last updated on ${lastUpdated}`;\n  } else if (index === 2 && isGraphDataArr) {\n    dataset = [\n      {\n        data: graphData.map(({confirmed}) => confirmed),\n        label: 'Confirmed',\n        borderColor: 'rgba(187, 134, 252, 1)',\n        fill: true,\n        backgroundColor: 'rgba(187, 134, 252, 0.2)',\n      },\n      {\n        data: graphData.map(({recovered}) => recovered),\n        label: 'Recovered',\n        borderColor: 'rgba(0, 255, 0, 0.5)',\n        fill: true,\n        backgroundColor: 'rgba(0, 255, 0, 0.8)',\n      },\n      {\n        data: graphData.map(({deaths}) => deaths),\n        label: 'Deceased',\n        borderColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true,\n        backgroundColor: 'rgba(255, 0, 0, 1.0)',\n      },\n    ];\n    title = `Last updated on ${lastUpdated}`;\n  } else if (index === 2 && !isGraphDataArr) {\n    dataset = [\n      {\n        label: 'Cases',\n        backgroundColor: [\n          'rgba(187, 134, 252, 0.7)',\n          'rgba(0, 255, 0, 0.5)',\n          'rgba(255, 0, 0, 0.5)',\n        ],\n        data: [\n          graphData.confirmed.value,\n          graphData.recovered.value,\n          graphData.deaths.value,\n        ],\n      },\n    ];\n    title = `Last updated on ${lastUpdated}`;\n  }\n\n  const lineChart =\n    graphData && graphData[0] ? (\n      <Line\n        data={{\n          labels: graphData.map(({date}) => date),\n          datasets: dataset,\n        }}\n        options={{\n          title: {display: true, text: title},\n          responsive: true,\n          maintainAspectRatio: true,\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawOnChartArea: false,\n                  display: false,\n                  drawBorder: false,\n                  zeroLineWidth: 0,\n                },\n                ticks: {\n                  display: false,\n                  autoSkip: true,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawOnChartArea: false,\n                  display: false,\n                  drawBorder: false,\n                  zeroLineWidth: 0,\n                },\n                ticks: {\n                  display: false,\n                  autoSkip: true,\n                },\n              },\n            ],\n          },\n          elements: {\n            point: {\n              radius: 0,\n              hitRadius: 10,\n              hoverRadius: 5,\n            },\n          },\n        }}\n      />\n    ) : null;\n\n  const barChart =\n    graphData && graphData.confirmed ? (\n      <Bar\n        data={{\n          labels: ['Confirmed', 'Recovered', 'Deceased'],\n          datasets: dataset,\n        }}\n        options={{\n          legend: {display: false},\n          title: {display: true, text: title},\n          scales: {\n            xAxes: [\n              {\n                gridLines: {\n                  drawOnChartArea: false,\n                  drawBorder: false,\n                },\n              },\n            ],\n            yAxes: [\n              {\n                gridLines: {\n                  drawOnChartArea: false,\n                  drawBorder: false,\n                },\n              },\n            ],\n          },\n        }}\n      />\n    ) : null;\n\n  return (\n    <div className=\"chart-container\">{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default React.memo(Chart);\n"],"sourceRoot":""}